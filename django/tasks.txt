    Homework 38.

1. В репозиторії із домашніми завданнями створити окрему директорію django.

2. В директорії django створити virtualenv, активувати його та встановити Django.

3. Створити Django проєкт за допомогою django-admin.

4. Створити .env, куди винести всі чутливі значення із налаштувань.

В налаштуваннях використовувати змінні середовища, а не "сирі" значення.
Використати бібліотеку python_dotenv

5. Створити файл requirements.txt, де має міститися інформація про встановлені пакети вашого віртуального середовища.

6. Директорія з віртуальним середовищем, файл бази даних, а також файл .env не мають бути запушені на репозиторій.
    Для цього їх можна додати в .gitignore.

7. Створити application user

8. Створити view, що має бути доступна за /users і повертати текст "Hello, users!"

9. Застосувати стандартні міграції для проєкту.

10. Створити суперадміна, щоб отримати доступ до адмін-панелі django (http://localhost:8000/admin)

========================================================================================================================

    Homework 39.

1. Створити Django applications: user, book, purchase. Додати інформацію про ці apps в INSTALLED_APPS (settings.py)

2. Створити моделі User, Book, Purchase у відповідних applications. Структура та звʼязки таблиць мають бути такими ж,
    як і в попередніх домашніх завданнях.

3. Створити необхідні міграції

4. Створити найпростіші views для кожного із application. Кожен із них має повертати всі записи із відповідної таблиці
    в базі даних у форматі json.
    Створити відповідні налаштування urls:
     - GET users/
     - GET books/
     - GET purchases/

5. (необов'язкове виконання) Модифікувати моделі наступним чином:

        В Book title та author разом мають бути унікальними. Тобто, не може бути 2х однакових книжок для одного і
        того ж автора.
        В Purchase змінити порядок сортування на сортування за датою у порядку спадання.

    Для цих модифікацій мають бути створені окремі міграції, додатково до тих, що створені відповідно до завдання 3.

========================================================================================================================

    Homework 40.

1. Для існуючих моделей створити конфігурацію для відображення в Django Admin. Таблиці в Django Admin мають відображати
    всі атрибути обʼєктів.

2. Перевизначити метод str існуючих моделей, надавши назвам обʼєктів більш читабельний вигляд. Наприклад, замість
    відображення "User object(1)" має відображатися "1: Test User"

========================================================================================================================

    Homework 41.

1. Для кожної існуючої моделі замінити найпростіші view функції на класи (class based views), зареєструвати відповідні url.

    Для кожної моделі має бути реалізований функціонал отримання списку обʼєктів (наприклад, GET /users) та отримання
    одного обʼєкту за id (наприклад, GET /users/<int:id>).

    Дані необхідно відрендерити за допомогою HTML темплейтів.

2. Реалізувати функціонал створення нових обʼєктів, створивши відповідні views та зареєструвавши відповідні url.

    Створити відповідні форми, що мають бути використані для створення обʼєктів.

========================================================================================================================

    Homework 42.

1. До існуючого Django проєкту встановити Django REST Framework та оновити налаштування відповідним чином.

2. Для всіх існуючих моделей створити відповідні Serializers.

========================================================================================================================

    Homework 44.

1. Для всіх моделей створити ViewSet, додавши до них раніше створені серіалайзери. Створити відповідні роутери.

2. Налаштувати стандартну пагінацію на рівні проєкту. Відображати по 5 елементів на сторінку.

3. Перевизначити пагінацію для UserViewSet, де відображати по 10 елементів на сторінку. Всі інші ViewSet
   мають відображати по 5 елементів.

4. Налаштувати filtering для всіх ViewSet на рівні проєкту. Для кожного ViewSet визначити поля, за якими може
   здійснюватися сортування та пошук.

========================================================================================================================

    Homework 45.

1. Встановити і налаштувати celery для вашого django проєкту.
   Встановити допоміжні бібліотеки для роботи із task broker (redis, rabbitmq).

2. Зафіксувати всі встановлені бібліотеки в файлі requirements.txt: pip freeze > requeirements.txt

3. Всередині application user створити celery задачу, яка буде друкувати будь-який текст.

4. Всередині application user створити celery задачу, яка буде приймати параметр user_id і друкувати
   кількість purchases для цього користувача.

5. Всередині application user створити scheduled celery задачу, яка буде щохвилини друкувати кількість обʼєктів user
   в базі даних.

========================================================================================================================

    Homework 46.

1. Створити Dockerfile, що має створювати image вашого Flask проєкту. .

    При запуску image за допомогою docker проєкт має бути доступним на порті 4200.

    Dockerfile створити в директорії із домашнім завданням по Flask.

2. Створити Dockerfile, що має створювати image вашого Django проєкту.

    При запуску image за допомогою docker проєкт має бути доступним на порті 8000.

    Dockerfile створити в директорії із домашнім завданням по Django

========================================================================================================================

    Homework 47.

1. Створити docker-compose файл, в якому налаштувати запуск вашого Flask application разом із необхідними
    додатковими сервісами.

    В окремих контейнерах мають запускатися Flask app,  Nginx, база даних Postgres.

2. Створити docker-compose файл, в якому налаштувати запуск вашого Django application разом із необхідними
    додатковими сервісами.

    В окремих контейнерах мають запускатися Django app, Nginx, Redis, Celery worker, Celery Beat, база даних Postgres.

    Внести необхідні налаштування в settings.py для коректної комунікації між сервісами.

========================================================================================================================

    Homework 48.

1. Написати мінімум 2 unit-тести для будь-яких функцій із попередніх домашніх завдань.

2. Написати тести для моделі User (Django application). Перевірити створення обʼєкта.

3. Написати тести для UserViewSet. Перевірити можливість створення обʼєкту, доступу до обʼєкту, видалення обʼєкту.

========================================================================================================================
