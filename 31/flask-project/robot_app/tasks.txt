Homework №32.

1. Створити функції для обробки таких запитів:
    GET /users – має повертати рандомний список імен (будь-яку кількість)
    GET /books – має повертати рандомний список книжок (будь-яку кількість) у вигляді html списку

2. Створити функції-обробники запитів на GET  /users та GET /books, що мають приймати url-параметри (/users/1, /books/kobzar):
    Для /users – id, що може бути тільки числовим значенням. Якщо значення id ділиться на 2 - повертати текст із цим значенням. Якщо не ділиться – повертати статус 404 Not Found
    Для /books – title, текстове значення. Трансформувати першу літеру title у велику, а всі інші у маленькі (за допомогою одного із методів str), повернути трансформоване значення у якості відповіді

3. Створити функцію для обробки запитів GET /params – має повертати HTML таблицю, в якій будуть міститися ключі та значення query parameters.
    Наприклад, при запиті GET /params?name=Test&age=1, на сторінці має відобразитися:

        parameter | value
        name         | Test
        age            | 1

4. Створити функцію для обробки запитів GET, POST /login – при запиті GET має повертати HTML форму (method=POST, action=/login), що має містити поля username, password та кнопку submit.
    При запиті POST має перевіряти чи містяться в даних запиту username та password:
    Якщо запит містить ці дані, потрібно перенаправити користувача на сторінку /users.
    Якщо ні – потрібно повернути помилку 400 із інформацією про відсутні дані.

5. (необов'язкове виконання) Створити кастомні обробники помилок 404 та 500, що мають повертати кастомних html код для відображення.

6. (необов'язкове виконання) Створити обробник запиту GET /, що має повертати html код із посиланнями на сторінки /login, /users, /books, /params

7. (необов'язкове виконання) Модифікувати функції обробники /users та /books із першого завдання таким чином,
    щоб вони повертали точну кількість значень на основі query param count: /users?count=20 має повернути 20 значень.
    Якщо параметр не передано — кількість має бути рандомною.

8. (необов'язкове виконання) До функції обробника POST /login додати валідацію username та password:

    Username не менше 5 символів
    Password має містити мінімум 1 цифру і 1 велику літеру, має бути не менше ніж 8 символів

========================================================================================================================

Homework 33.

1. Створити html темплейти для кожного із ендпоінтів, що були створені під час виконання минулого ДЗ.
   Мають відображатися ті самі дані, але інтегровані в темплейти за допомогою контексту.

    /users
    /users/{id}
    /books
    /books/{id}
    /params
    /login

2. В ендпоінт /login, при заповненні форми, додати функціонал запису імені користувача в сесію.

3. На всі сторінки додати перевірку на те, чи містить сесія імʼя користувача:
    Якщо містить – відображати на самому початку сторінки текст "Hello, username", де username – імʼя користувача із сесії.
    Якщо не містить – перенаправляти користувача на сторінку /login

4. (необов'язкове виконання) На кожну сторінку додати кнопку logout, при натисканні якої користувач має видалятися із
    сесії і перенаправлятися на сторінку /login. Для цього потрібно реалізувати також окремий ендпоінт /logout.

5. (необов'язкове виконання) Додати стилі до HTML коду, що міститься в темплейтах, розмістивши css файли як статичні файли в окремій директорії.


========================================================================================================================

Homework 36.

1. Створити файл .env, куди додати всі дані, що мають бути секретними:

      SECRET_KEY
      Назва бази даних (та інші деталі за наявності)
      Хост та порт, на яких запускається сервіс
      Інші значення при необхідності

2. Створити файлі .env.template, який буде описувати структуру .env (назви змінних), але не містити значень.

    Файл .env НЕ ПОТРІБНО пушити на GitHub, .env.template потрібно.
    (Можна додати .env до .gitignore)

3. Замінити в коді всі секретні значення на значення із environment

4. За допомогою flask_sqlalchemy підключити базу даних та створити такі моделі:

    User,
    Book,
    Purchase.

    Структура даних та звʼязки мають бути такими ж, як і в домашньому завданні до теми “Базова робота з базами даних. Part 2”.

5. Модифікувати існуючі, або додати нові енпоінти. Дані відображати у форматі JSON або використовуючи HTML template:

    GET /users — відобразити список всіх обʼєктів User (всі записи відповідної таблиці)
    GET /users/<int:user_id> —- відобразити інформацію про User із відповідним id, або ж 404
    GET /books —- відобразити список всіх обʼєктів Book (всі записи відповідної таблиці)
    GET /books/<int:book_id> —- відобразити інформацію про Book із відповідним id, або ж 404
    GET /purchases —- відобразити список всіх обʼєктів Purchase (всі записи відповідної таблиці)
    GET /purchases/<int:purchase_id> —- відобразити інформацію про Purchase із відповідним id, або ж 404

6. (необов'язкове виконання) При передачі із запитом query param size=n для ендпоінтів зі списком обʼєктів,
    показувати відповідну кількість обʼєктів

7. (необов'язкове виконання) При запиті на endpoint /purchases та /purchases/<int:purchase_id> виводити не лише
    інформацію про покупки, але і назву книжки та імʼя користувача, що її купив

8. (необов'язкове виконання) Реалізувати можливість створення нових обʼєктів в базі даних. Ендпоінти можуть приймати
    "application/json" або "application/x-www-form-urlencoded":

     POST /users
     POST /books
     POST /purchases (перевірити чи існують відповідні User та Book)
